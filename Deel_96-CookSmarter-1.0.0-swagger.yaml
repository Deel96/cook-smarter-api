openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/Deel_96/CookSmarter/1.0.0
  - description: SwaggerHub API Auto Mocking
    url: https://cook-smarter-api.herokuapp.com/recipes2
info:
  description: CookSmarter API
  version: "1.0.0"
  title: API of the CookSmater project
  contact:
    email: dennis.eller@fh-bielefeld.de
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: authentification
    description: Operations about authentification
  - name: settings
    description: Operations about settings
  - name: recipes
    description: Operations available to recipes
  - name: foodplan
    description: Operations available to foodplan
  - name: grocerylist
    description: Operations about grocerylists


paths:

  /register:
   post:
    tags:
      - authentification
    summary: Registers a new user
    operationId: registerUser
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Register'
    responses:
      '201':
        description: Registration sucessfull.
      '400':
        description: Username already exists.
      '401':
        description: Email already exists.
  /login:
   post:
    tags:
      - authentification
    summary: Logging user in.
    operationId: loginUser
    responses:
      '201':
        description: Login sucessfull.
      '400':
        description: E-Mail or password wrong.
    requestBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Login'
      description: Login data.
  /logout:
   post:
    tags:
      - authentification
    summary: Logs user out.
    operationId: logoutUser
    responses:
      '201':
        description: Logout sucessfull.
      '400':
        description: Logout failed.
        
  /settings/markets:
    put:
      tags:
        - settings
      summary: Updates markets.
      operationId: updateMarkets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MarketSetting'
        description: New Marketlist
      responses:
        '201':
          description: Marketlist updated.
        '400':
          description: Invalid Input.
  /settings/servingsize:
    put:
      tags:
        - settings
      summary: Updates servingsize.
      operationId: updateServingsize
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              example: 4
        description: New Servingsize.
      responses:
        '201':
          description: Servingsize updated.
        '400':
          description: Invalid Input.
  /settings/username:
    put:
      tags:
        - settings
      summary: Updates username.
      operationId: updateUsername
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "MyNewName"
        description: New Username.
      responses:
        '201':
          description: Username updated.
        '400':
          description: Invalid Input.
  /settings/email:
    put:
      tags:
        - settings
      summary: Updates Email.
      operationId: updateEMail
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "john@new-mail.com"
        description: New E-Mail.
      responses:
        '201':
          description: E-Mail updated.
        '400':
          description: Invalid Input.
  /settings/password:
    put:
      tags:
        - settings
      summary: Updates Password.
      operationId: updatePassword
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: "NewSecurePassword123"
        description: New password.
      responses:
        '201':
          description: Password updated.
        '400':
          description: Invalid Input.
          
  /recipes:
    get:
      tags:
        - recipes
      summary: Returns all recipes.
      operationId: getAllRecipes
      description: returns all recipes
      parameters:
        - in: query
          name: searchString
          description: optional searchstring for recipe name
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipePreview'
        '400':
          description: bad input parameter
  /recipes/{recipeId}:
    get:
      tags:
        - recipes
      summary: Returns a single recipe.
      operationId: getRecipeById
      parameters:
        - in: path
          name: recipeId
          description: Id of a recipe
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
        '400':
          description: Invalid ID supplied.
        '404':
          description: recipe not found.
  /recipes/{recipeId}/comments:
    get:
      tags:
        - recipes
      summary: Returns all comments of a single recipe.
      operationId: getAllCommentsRecipeById
      description: Returns all comments of a single recipe.
      parameters:
        - in: path
          name: recipeId
          description: Id of a recipe
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: sucessfull operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          description: recipe not found
    post:
      tags:
      - recipes
      summary: Posts a comment under a recipe.
      operationId: postComment
      parameters:
        - in: path
          name: recipeId
          description: Post a new comment under a recipe
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        '200':
          description: Comment posted.
        '404':
          description: Recipe not found.
  /recipes/{recipeId}/ratings:
    get:
      tags:
        - recipes
      summary: Returns all ratings of a single recipe.
      operationId: getAllRatingsRecipeById
      description: Returns all ratings of a single recipe.
      parameters:
        - in: path
          name: recipeId
          description: Id of a recipe
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: sucessfull operation
          content:
            application/json:
              schema:
                type: number
                example: 4.5
        '404':
          description: recipe not found
    post:
      tags:
      - recipes
      summary: Posts a rating for a recipe.
      operationId: postRating
      parameters:
        - in: path
          name: recipeId
          description: Post a new rating for a recipe
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: integer
              example: 5
      responses:
        '200':
          description: Rating posted.
        '404':
          description: Recipe not found.
  /me/recipes:
    get:
      tags:
        - recipes
      summary: Returns all recipes from the logged in user.
      operationId: getAllRecipesFromLoggedInUser
      parameters:
        - in: query
          name: searchString
          description: pass an optional search string for looking up recipes
          required: false
          schema:
            type: string
        - in: query
          name: skip
          description: number of records to skip for pagination
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          name: limit
          description: maximum number of records to return
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 50
      responses:
        '200':
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: bad input parameter
    post:
      tags:
        - recipes
      summary: Adds a recipe.
      operationId: addRecipe
      description: Adds an recipe to the system.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
        description: Recipe item to add
      responses:
        '201':
          description: item created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Recipe"
        '400':
          description: 'invalid input, object invalid'
  /me/recipes/{recipeId}:
    put:
      tags:
        - recipes
      summary: Updates a recipe.
      operationId: updateRecipe
      parameters:
        - in: path
          name: recipeId
          description: Id of a recipe
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: item created
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Recipe'
        description: Inventory item to add
    delete:
      tags:
        - recipes
      summary: Deletes a single recipe.
      operationId: deleteRecipeById
      parameters:
        - in: path
          name: recipeId
          description: Id of a recipe
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Deletion sucessfull.
        '400':
          description: Deletion failed.
  /me/favorites:
    get:
      tags:
      - recipes
      summary: Displays current favorite recipes.
      operationId: getFavorites
      responses:
        '200':
          description: Displays favorite recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Recipe'
        '400':
          description: bad input parameter
    post:
      tags:
      - recipes
      summary: Adds a recipe to favorites.
      operationId: postFavorite
      requestBody:
        content:
          application/json:
            schema:
              type: integer
      responses:
        '200':
          description: Displays favorite recipes.
          content:
            application/json:
              schema:
                type: integer
                example: 1
        '400':
          description: Bad input parameter.
  /me/favorites/{recipeId}:
    delete:
      parameters:
        - in: path
          name: recipeId
          description: Id of a recipe
          required: true
          schema:
            type: integer
            example: 1
      tags:
      - recipes
      summary: Removes a recipe from favorites.
      operationId: deleteFavorite
      responses:
        '204':
          description: Operation successfull.
        '400':
          description: Bad input parameter.
  
  /me/foodplan:
    get:
      tags:
      - foodplan
      summary: Displays current foodplan.
      operationId: getFoodplan
      responses:
        '200':
          description: Operation successfull.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cookday'
                  
        '400':
          description: Bad input parameter.
  /me/foodplan/{cookdayId}/{recipeId}:
      put:
        tags:
        - foodplan
        summary: Updates a recipe of a cookday of the current foodplan.
        operationId: GetRecipeFromCookDayFromCurrentFoodplan
        parameters:
        - in: path
          name: recipeId
          description: Id of a recipe
          required: true
          schema:
            type: integer
        - in: path
          name: cookdayId
          description: Id of a cookday
          required: true
          schema:
            type: integer
        responses:
          '200':
            description: Operation successfull.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/Recipe'
          '400':
            description: Bad input parameter.
  
  /me/foodplan/grocerylists:
    get:
      tags:
      - grocerylist
      summary: Returns grocereylists of the foodplan.
      operationId: getGrocerylistsFromFoodplan
      responses:
        '200':
          description: Current Grocerylists.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GroceryList'
        '400':
          description: bad input parameter
  /me/foodplan/grocerylists/{id}:
    get:
      tags:
      - grocerylist
      summary: Returns one grocereylists of the current foodplan.
      operationId: getGroceryListFromFoodplanById
      parameters:
        - in: path
          name: id
          description: Id of a grocerylist
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Current Grocerylists
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/GroceryList'
        '400':
          description: bad input parameter
    put:
      tags:
        - grocerylist
      summary: Updates a grocerylists for ticked groceries.
      operationId: updateGroceryList
      parameters:
        - in: path
          name: id
          description: Id of a grocerylist
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: grocerylist updated
        '400':
          description: 'invalid input, object invalid'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroceryList'
        description: Grocerylist zo update
  
components:
  schemas:
    Recipe:
          type: object
          required:
            - id
            - name
            - picture
            - directions
            - preparationtime
            - cookingtime
            - difficulty
            - dateposted
            - tags
            - author
            - rating
            - ingredients
          properties:
            id:
              type: integer
              format: int32
              example: 1
            name:
              type: string
              example: Butterbrot
            picture:
              type: string
              example: Bild
            directions:
              type: string
              example: Butter auf Brot schmieren
            preparationtime:
              type: integer
              example: 0
            cookingtime:
              type: integer
              example: 5
            difficulty:
              type: integer
              example: 1
            dateposted:
              type: string
              format: date
              example: "13.03.2021"
            author:
              type: string
              example: "Rudi79"
            tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
            rating:
              type: integer
              format: float
              example: 4.3
            online:
              type: boolean
              example: true
            ingredients:
              type: array
              items:
                $ref: '#/components/schemas/RecipeEntry'
    RecipePreview:
          type: object
          required:
            - id
            - name
            - picture
            - tags
            - author
            - rating
          properties:
            id:
              type: integer
              format: int32
              example: 1
            name:
              type: string
              example: Butterbrot
            picture:
              type: string
              example: Butterbrot
            rating:
              type: integer
              format: float
              example: 4.3
            tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
    Tag:
      type: object
      required:
        - id
        - name
        - description
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: kalt
        description:
          type: string
          example: Speisen, die kalt serviert werden.
    Login:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: dennis@test.de
        password:
          type: string
          format: password
          example: secure123
    Register:
      type: object
      required:
        - username
        - email
        - password
      properties:
         username:
          type: string
          example: Rudolf89
         email:
          type: string
          format: email
          example: dennis@test.de
         password:
          type: string
          format: password
          example: secure123
    Comment:
      type: object
      required:
        - id
        - author
        - text
        - date
      properties:
        id:
          type: integer
          format: int32
          example: 1
        author:
          type: string
          example: "Elefantenbeine7"
        text:
          type: string
          example: War sehr lecker. Super beschrieben!
        date:
          type: string
          format: date
          example: "13.03.2021"
    Cookday:
      type: object
      required:
        - id
        - day
        - date
        - recipes
      properties:
        id:
          type: integer
          format: int32
          example: 1
        day:
          type: string
          example: "Samstag"
        date:
          type: string
          format: date
          example: "13.03.2021"
        recipes:
          type: array
          items: 
            $ref: '#/components/schemas/RecipePreview'
    GroceryList:
          type: object
          required:
            - id
            - supermarket
            - groceryentries
          properties:
            id:
              type: integer
              format: int32
              example: 1
            supermarket:
              type: string
              example: Aldi
            groceryentries:
              type: array
              items:
                $ref: '#/components/schemas/GroceryEntry'
              example: Butterbrot
    GroceryEntry:
          type: object
          required:
            - id
            - name
            - picture
            - tags
            - author
            - rating
          properties:
            id:
              type: integer
              format: int32
              example: 1
            name:
              type: string
              example: Butterbrot
            picture:
              type: string
              example: Butterbrot
            rating:
              type: integer
              format: float
              example: 4.3
            tags:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
    RecipeEntry:
      type: object
      required:
        - id
        - unit
        - amount
        - freshness
      properties:
        id:
          type: integer
          format: int32
          example: 1
        ingredient:
          type: string
          example: Brot
        unit:
          type: string
          example: g
        amount:
          type: integer
          example: 100
        freshness:
          type: integer
          format: float
          example: 4.3
    MarketSetting:
      type: object
      required:
        - fresh
        - packaged
        - arbitrary
      properties:
        fresh:
          type: integer
          format: int32
          example: 1
        packaged:
          type: integer
          format: int32
          example: 1
        arbitrary:
          type: integer
          format: int32
          example: 1
  requestBodies:
    Recipe:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Recipe'
      description: Recipe object that needs to be added
      required: true
    Login:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Login'
      required: true
    Register:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Login'
      required: true